"""
Django settings for colonFourNewProject project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import base64
import os
import json
from decouple import config, UndefinedValueError
from google.oauth2 import service_account


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = config("SECRET_KEY")
    DEBUG = config("DEBUG", cast=bool)
    ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=lambda v: [
                           s.strip() for s in v.split(',')])
except UndefinedValueError as e:
    raise RuntimeError(f"Missing required environment variable: {e}")


# Application definition

INSTALLED_APPS = [
    "newColonFour",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'storages',  # Add django-storages here
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # 'newColonFour.middleware.VerificationCheckMiddleware',

]

ROOT_URLCONF = "colonFourNewProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates'),
                 os.path.join(BASE_DIR, 'newColonFour', 'templates'),
                 ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "colonFourNewProject.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

try:
    if not DEBUG:
        DATABASES = {
            'default': {
                'ENGINE': config('DB_ENGINE'),
                'NAME': config('DB_NAME'),
                'USER': config('DB_USER'),
                'PASSWORD': config('DB_PASSWORD'),
                'HOST': config('DB_HOST'),
                'PORT': config('DB_PORT'),
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': config('TEST_DB_ENGINE'),
                'NAME': config('TEST_DB_NAME'),
                'USER': config('TEST_DB_USER'),
                'PASSWORD': config('TEST_DB_PASSWORD'),
                'HOST': config('TEST_DB_HOST'),
                'PORT': config('TEST_DB_PORT', cast=int),
                'CONN_MAX_AGE': 150,  # Keep connections open for 10 minutes

                'TEST': {
                    'NAME': 'dyagdjakdba',
                },
            }
        }
except UndefinedValueError as e:
    raise RuntimeError(f"Missing required database configuration: {e}")


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'newColonFour.CustomUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator", },
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator", },
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator", },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
    # Add other paths as needed for your apps
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_build', "static")

# Media files configuration
if not DEBUG:
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
    GS_BUCKET_NAME = config('GS_BUCKET_NAME')

    # Retrieve the base64-encoded JSON from the environment variable
    encoded_google_credentials_json = config(
        'GOOGLE_APPLICATION_CREDENTIALS_JSON')

    # Decode the base64-encoded string
    decoded_google_credentials_json = base64.b64decode(
        encoded_google_credentials_json).decode('utf-8')

    # Load the decoded string as JSON
    google_credentials = json.loads(decoded_google_credentials_json)

    # Use the JSON to create Google service account credentials
    try:
        GS_CREDENTIALS = service_account.Credentials.from_service_account_info(
            google_credentials)
    except json.JSONDecodeError as e:
        raise RuntimeError(
            f"Invalid JSON for GOOGLE_APPLICATION_CREDENTIALS_JSON: {e}")

    MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/'
else:
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


GOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SESSION_COOKIE_SECURE = config(
    'SESSION_COOKIE_SECURE', default=False, cast=bool)
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=False, cast=bool)
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=False, cast=bool)


LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

LOG_LEVEL = config('DJANGO_LOG_LEVEL', default='WARNING').upper()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
    },
    'formatters': {
        'detailed': {
            'format': '{asctime} [{levelname}] {message} from {name}',
            'style': '{',
        },
    },
    'loggers': {
        'newColonFour': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}


# Add this to your CACHES setting
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'rediss://redis-13880.c300.eu-central-1-1.ec2.cloud.redislabs.com:13880/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            # Fetch password from .env file
            'PASSWORD': config('REDIS_PASSWORD'),
            'SSL': True,
        },
    },
    'django-backblaze-b2': {  # Add this new cache configuration
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'django-backblaze-b2-cache',
    },
}
